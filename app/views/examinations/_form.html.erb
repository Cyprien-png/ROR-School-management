<%= form_with(model: examination, class: "space-y-6") do |form| %>
  <% if examination.errors.any? %>
    <div class="bg-red-50 border-l-4 border-red-400 p-4 mb-6">
      <div class="flex">
        <div class="flex-shrink-0">
          <i class="fas fa-exclamation-circle text-red-400"></i>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">
            <%= pluralize(examination.errors.count, "error") %> prohibited this examination from being saved:
          </h3>
          <div class="mt-2 text-sm text-red-700">
            <ul class="list-disc pl-5 space-y-1">
              <% examination.errors.each do |error| %>
                <li><%= error.full_message %></li>
              <% end %>
            </ul>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <div class="bg-white shadow overflow-hidden sm:rounded-lg">
    <div class="px-4 py-5 sm:px-6 bg-yellow-50">
      <h3 class="text-lg leading-6 font-medium text-yellow-800">
        Examination Information
      </h3>
      <p class="mt-1 max-w-2xl text-sm text-yellow-600">
        Fill in the details for this examination
      </p>
    </div>
    <div class="border-t border-gray-200 px-4 py-5 sm:p-6">
      <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
        <div class="sm:col-span-2">
          <%= form.label :title, class: "block text-sm font-medium text-gray-700" %>
          <%= form.text_field :title, class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-yellow-500 focus:ring-yellow-500" %>
        </div>

        <div class="sm:col-span-2">
          <%= form.label :lecture_id, "Associated Lecture", class: "block text-sm font-medium text-gray-700" %>
          <%= form.collection_select :lecture_id, 
              Lecture.includes(:subject, :school_class, :trimesters).order('subjects.name, school_classes.name'), 
              :id, 
              ->(lecture) { 
                "#{lecture.subject.name} - #{lecture.school_class.name} (#{lecture.week_day.capitalize} #{lecture.start_time.strftime("%H:%M")})" 
              },
              { prompt: "Select a lecture" },
              { class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-yellow-500 focus:ring-yellow-500", onchange: "updateAvailableDates(this.value)" } %>
        </div>

        <div class="sm:col-span-2">
          <%= form.label :date, class: "block text-sm font-medium text-gray-700" %>
          <div id="date-wrapper" class="mt-1">
            <%= form.select :date,
                [],
                { prompt: "Select a date" },
                { class: "date-select block w-full rounded-md border-gray-300 shadow-sm focus:border-yellow-500 focus:ring-yellow-500", disabled: true } %>
            <div id="no-dates-message" class="hidden mt-2 text-sm text-gray-500 italic">
              No available dates for this lecture
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="px-4 py-3 bg-gray-50 text-right sm:px-6">
      <%= form.submit class: "inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-yellow-600 hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500" %>
    </div>
  </div>
<% end %>

<script>
function formatDate(dateString) {
  return new Date(dateString).toLocaleDateString('en-US', { 
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

function updateAvailableDates(lectureId) {
  const dateSelect = document.querySelector('.date-select');
  const noDateMessage = document.getElementById('no-dates-message');
  
  // Reset the select
  dateSelect.innerHTML = '<option value="">Select a date</option>';
  dateSelect.disabled = true;
  noDateMessage.classList.add('hidden');

  if (!lectureId) {
    return;
  }

  fetch(`/examinations/available_dates/${lectureId}`)
    .then(response => response.json())
    .then(dates => {
      if (dates.length === 0) {
        noDateMessage.classList.remove('hidden');
        return;
      }

      dates.forEach(date => {
        const option = document.createElement('option');
        option.value = date;
        option.textContent = formatDate(date);
        dateSelect.appendChild(option);
      });
      
      dateSelect.disabled = false;

      // If there's a previously selected date, try to select it
      const currentDate = '<%= @examination.date&.to_s %>';
      if (currentDate && dates.includes(currentDate)) {
        dateSelect.value = currentDate;
      }
    });
}

// Call the function if a lecture is already selected
document.addEventListener('DOMContentLoaded', function() {
  const lectureSelect = document.querySelector('select[name="examination[lecture_id]"]');
  if (lectureSelect.value) {
    updateAvailableDates(lectureSelect.value);
  }
});
</script>
